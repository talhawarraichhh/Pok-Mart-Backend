// prisma/schema.prisma
// ———————————————————————————————————————————————————————————————————
// PRISMA CLIENT GENERATOR & DATASOURCE
// ———————————————————————————————————————————————————————————————————
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ———————————————————————————————————————————————————————————————————
// 1) USER, ADMIN, CLIENT, SELLER, CUSTOMER
// ———————————————————————————————————————————————————————————————————
model User {
  id       Int      @id @default(autoincrement())
  password String
  username String
  email    String

  seller   Seller?
  customer Customer?
  admin    Admin?
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Seller {
  id       Int   @id @default(autoincrement())
  userId   Int   @unique
  rating   Int?
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders   Order[]
  listings Listing[]
}

model Customer {
  id       Int      @id @default(autoincrement())
  userId   Int      @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders   Order[]
  cart     Cart?
}

// ———————————————————————————————————————————————————————————————————
// 2) CART & CART_ITEM
// ———————————————————————————————————————————————————————————————————
model Cart {
  id            Int        @id @default(autoincrement())
  numberOfItems Int?

  customerId Int?      @unique
  customer   Customer? @relation(fields: [customerId], references: [id])

  items CartItem[]
}

model CartItem {
  id          Int     @id @default(autoincrement())
  quantity    Int

  cartId   Int
  cart     Cart    @relation(fields: [cartId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  listingId Int
  listing   Listing @relation("ListingCartItems", fields: [listingId], references: [id], onDelete: Cascade)
}

// ———————————————————————————————————————————————————————————————————
// 3) ORDER & ORDER_ITEM
// ———————————————————————————————————————————————————————————————————
model Order {
  id         Int      @id @default(autoincrement())
  cost       Decimal?
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  sellerId   Int
  seller     Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  items      OrderItem[]
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  quantity       Int
  purchase_Price Decimal?
  orderId        Int
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId      Int
  product        Product @relation(fields: [productId], references: [id])
}

// ———————————————————————————————————————————————————————————————————
// 4) PRODUCT, LISTING, SET, SINGLE_CARD, SEALED_PRODUCT
// ———————————————————————————————————————————————————————————————————
model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  productType String?

  setId  Int?
  set    Set?     @relation(fields: [setId], references: [id])

  listings   Listing[]
  OrderItem  OrderItem[]
  CartItem   CartItem[]

  singleCard    SingleCard?
  sealedProduct SealedProduct?
}

model Set {
  id          Int       @id @default(autoincrement())
  name        String
  release_Date DateTime?

  products Product[]
}

model Listing {
  id        Int     @id @default(autoincrement())
  stock     Int
  price     Decimal
  sellerId  Int
  seller    Seller  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  cartItems CartItem[] @relation("ListingCartItems")
}

model SingleCard {
  id        Int    @id @default(autoincrement())
  productId Int    @unique
  condition String
  rarity    String
  type      String
  category  String

  product Product @relation(fields: [productId], references: [id])
}

model SealedProduct {
  id        Int    @id @default(autoincrement())
  productId Int    @unique
  condition String?
  category  String?

  product Product @relation(fields: [productId], references: [id])
}
